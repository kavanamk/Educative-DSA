# Definition for a Linked List node
class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next

def print_list(head):
    while head:
        print(head.val, end=" -> " if head.next else "")
        head = head.next
    print()

def swap_nodes(head, k):
    dummy = ListNode(0, head)
    cur1 = dummy
    cur2 = dummy
    
    # Step 1: move cur1 to (k-1)th node
    for _ in range(k-1):
        cur1 = cur1.next
    
    # Step 2: find the (n-k)th node using two-pointer method
    fast = cur1.next
    while fast.next:
        fast = fast.next
        cur2 = cur2.next
    
    # Step 3: swap nodes
    node1 = cur1.next
    node2 = cur2.next
    after_node1 = node1.next
    after_node2 = node2.next
    
    # If nodes are adjacent, handle separately
    if cur1.next == cur2:
        cur1.next = node2
        node2.next = node1
        node1.next = after_node2
    elif cur2.next == cur1:
        cur2.next = node1
        node1.next = node2
        node2.next = after_node1
    else:
        cur1.next = node2
        node2.next = after_node1
        cur2.next = node1
        node1.next = after_node2
    
    return dummy.next



# Test case
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = ListNode(6)
head.next.next.next.next.next.next = ListNode(7)

k=2
ans=swap_nodes(head, k)
print_list(ans)

