Start iterating through the array, considering each element a potential starting position.

Initialize two pointers at the current position during each iteration: a slow pointer (one step at a time) and a fast pointer (two steps at a time).

Move each pointer forward or backward according to the number at its current position.

Stop exploring from the current index if the direction changes or the pointer forms a single-element loop by returning to the same position.

If the slow and fast pointers meet at the same position, a valid loop is detectedâ€”immediately return TRUE.

If no valid loop is found after checking all positions, return FALSE.

def circular_array_loop(nums):
    size = len(nums)
    
    for i in range(size):
        slow = fast = i
        forward = nums[i] > 0
      
        while True:
            slow = next_step(slow, nums[slow], size) 
            if is_not_cycle(nums, forward, slow):
                break
        
            fast = next_step(fast, nums[fast], size)
            if is_not_cycle(nums, forward, fast):
                break
            
            fast = next_step(fast, nums[fast], size)
            if is_not_cycle(nums, forward, fast):
                break
        
            if slow == fast:
                return True
                
    return False

# A function to calculate the next step
def next_step(pointer, value, size):
    return (pointer + value) % size


# A function to detect a cycle doesn't exist
def is_not_cycle(nums, prev_direction, pointer):
    curr_direction = nums[pointer] >= 0
    
    if (prev_direction != curr_direction) or (nums[pointer] % len(nums) == 0):
        return True
    else:
        return False

# Driver code
def main():

    input = (
            [-2, -3, -9],
            [-5, -4, -3, -2, -1],
            [-1, -2, -3, -4, -5],
            [2, 1, -1, -2],
            [-1, -2, -3, -4, -5, 6],
            [1, 2, -3, 3, 4, 7, 1],
            [2, 2, 2, 7, 2, -1, 2, -1, -1]
            )
    num = 1

    for i in input:
        print(f"{num}.\tCircular array = {i}")
        print(f"\n\tFound loop = {circular_array_loop(i)}")
        print("-"*100, "\n")
        num += 1


if __name__ == "__main__":
    main()
