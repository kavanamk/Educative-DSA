# greedy scheduler
def greedyScheduler(S,F):
    #create a [[start time, end time]] array
    schedules=[]
    output=[]
    for s,e in zip(S,F):
        schedules.append([s,e])
    #sort by end time
    schedules.sort(key=lambda x: x[1])
    #curr start time,end time
    cur_st, cur_et = schedules[0]
    output.append(schedules[0])
    #for each start, end in schedule[1..n]
    for st, et in schedules[1:]:
        #if  start > cur end: add to output, update curr
        if st>=cur_et:
            output.append([st, et])
            cur_st,cur_et=st, et
    return output
    

S=[1, 3, 0, 5,8, 5]

F= [2, 4, 6, 7, 9, 9]

ans=greedyScheduler(S, F)
print(ans)

#time complexity = O(nlogn)
# Test cases
# empty [],[]
#same start time
#same end time 
#len(S)!=len(N)
#unsorted
#sorted
