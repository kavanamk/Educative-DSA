def is_safe(board, row, col, n):
    # Check column
    for i in range(row):
        if board[i][col] == 1:
            return False
    
    # Check upper-left diagonal
    i, j = row - 1, col - 1
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1
    
    # Check upper-right diagonal
    i, j = row - 1, col + 1
    while i >= 0 and j < n:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1

    return True


def solve_n_queens(board, row, n, count):
    if row == n:
        count[0] += 1
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            solve_n_queens(board, row + 1, n, count)
            board[row][col] = 0  # backtrack


def total_n_queens(n):
    board = [[0]*n for _ in range(n)]
    count = [0]
    solve_n_queens(board, 0, n, count)
    return count[0]


# Example usage:
for n in range(1, 10):
    print(f"N = {n} -> {total_n_queens(n)} solution(s)")
 
