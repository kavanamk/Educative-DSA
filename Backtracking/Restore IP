def isValidIP(s):
    parts = s.split(".")
    if len(parts) != 4:
        return False
    for num in parts:
        # Check for non-empty, numeric, <=255, no leading zeros (except '0')
        if not num.isdigit() or int(num) > 255 or (len(num) > 1 and num[0] == '0'):
            return False
    return True

def isValidIPPart(part):
    return part.isdigit() and int(part) <= 255 and (len(part) == 1 or part[0] != '0')

def restore_ip_addresses(s):
    res = []

    def dfs(idx, dots, ip):
        if dots == 3:  # We already placed 3 dots
            last_part = s[idx:]
            if isValidIPPart(last_part):
                ip_addr = ip + last_part
                if isValidIP(ip_addr):
                    res.append(ip_addr)
            return

        for i in range(1, 4):  # IP parts can be length 1 to 3
            if idx + i > len(s):
                break
            part = s[idx:idx+i]
            if isValidIPPart(part):
                dfs(idx+i, dots+1, ip + part + ".")

    dfs(0, 0, "")
    return res

s = '1253412125'
print(restore_ip_addresses(s))
print(isValidIP('125.34.121.25'))
