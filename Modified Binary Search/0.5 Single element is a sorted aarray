def single_non_duplicate(nums):
    """
    Given a sorted list where every element appears exactly twice except for one,
    find that single non-duplicate element using binary search.
    """
    # Initialize two pointers
    l = 0
    r = len(nums) - 1

    # Binary search
    while l < r:
        # Find mid index
        mid = l + (r - l) // 2

        # Make mid even so that mid and mid+1 form a pair
        if mid % 2 == 1:
            mid -= 1

        # If the pair is valid, the single element is after it
        if nums[mid] == nums[mid + 1]:
            l = mid + 2
        else:
            # The mismatch is before or at mid, so reduce right
            r = mid

    # When left == right, weâ€™ve found the single element
    return nums[l]
